generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id                String     @id @default(cuid())
  content           String?
  title             String
  email             String?
  thesis            String?
  yesAction         String?
  votes             Int?
  maybeAction       String?
  noAction          String?
  voted             String[]
  likes             String[]
  dislikes          String[]
  date              DateTime
  userId            String
  probablyNoAction  String?
  probablyYesAction String?
  subCategories     String[]
  links             String?
  tags              String[]   @default([])
  primaryLinks      String?
  searchVector      String?    @db.Text
  comments          Comment[]
  bookmarks         Bookmark[]
  owner             User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  voteRecords       Vote[]
  categories        Category[] @relation("CategoryToPost")

  @@map("posts")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  username  String
  voted     Json[]
  bio       String?
  followers String[]
  following String[]
  blurhash  String?
  comments  Comment[]
  bookmarks Bookmark[]
  posts     Post[]
  votes     Vote[]

  @@map("users")
}

model Bookmark {
  id     String @id @default(cuid())
  userId String
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("bookmarks")
}

model Conversation {
  id        String    @id @default(cuid())
  me        String
  roomName  String
  recipient String
  date      DateTime
  messages  Message[]

  @@map("conversations")
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  date           DateTime     @default(now())
  message        String
  userName       String
  status         String
  recipient      String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Vote {
  id     String @id @default(cuid())
  vote   String
  userId String
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id])

  @@map("votes")
}

model Comment {
  id       String    @id @default(cuid())
  comment  String
  vote     String
  postId   String
  likes    String[]
  dislikes String[]
  userId   String
  username String
  date     DateTime  @default(now())
  parentId String?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id            String        @id @default(cuid())
  name          String        @unique
  iconPath      String?
  isCustomIcon  Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  subcategories Subcategory[]
  posts         Post[]        @relation("CategoryToPost")

  @@map("categories")
}

model Subcategory {
  id         String   @id @default(cuid())
  name       String
  categoryId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("subcategories")
}
