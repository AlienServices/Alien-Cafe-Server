generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Comment {
  id            String    @id
  comment       String
  vote          String
  postId        String
  likes         String[]
  dislikes      String[]
  userId        String
  username      String
  date          DateTime  @default(now())
  parentId      String?
  Comment       Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  other_Comment Comment[] @relation("CommentToComment")
  posts         posts     @relation(fields: [postId], references: [id], onDelete: Cascade)
  users         users     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DeviceToken {
  id        String   @id
  userId    String
  token     String   @unique
  platform  String
  createdAt DateTime @default(now())
  updatedAt DateTime
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Draft {
  id                  String                @id
  title               String
  content             String
  links               String?
  primaryLinks        String?
  ownerId             String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  categories          String[]              @default([])
  subcategories       String[]              @default([])
  tags                String[]              @default([])
  contentHtml         String?
  contentMarkdown     String?
  contentText         String?
  users               users                 @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  DraftCollaborator   DraftCollaborator[]
  draft_link_previews draft_link_previews[]
  draft_media         draft_media[]
}

model DraftCollaborator {
  id        String   @id
  userId    String
  draftId   String
  createdAt DateTime @default(now())
  Draft     Draft    @relation(fields: [draftId], references: [id])
  users     users    @relation(fields: [userId], references: [id])
}

model bookmarks {
  id     String @id
  userId String
  postId String
  posts  posts  @relation(fields: [postId], references: [id], onDelete: Cascade)
  users  users  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model categories {
  id            String          @id
  name          String          @unique
  iconPath      String?
  isCustomIcon  Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  subcategories subcategories[]
  posts         posts[]         @relation("CategoryToPost")
}

model conversations {
  id        String     @id
  me        String
  roomName  String
  recipient String
  date      DateTime
  messages  messages[]
}

model draft_link_previews {
  id          String   @id
  draftId     String
  url         String
  title       String?
  description String?
  imageUrl    String?
  domain      String?
  faviconUrl  String?
  platform    String?
  author      String?
  site        String?
  createdAt   DateTime @default(now())
  Draft       Draft    @relation(fields: [draftId], references: [id], onDelete: Cascade)

  @@unique([draftId, url])
}

model draft_media {
  id               String   @id
  draftId          String
  filename         String
  originalName     String
  fileSize         Int
  mimeType         String
  storagePath      String
  thumbnailPath    String?
  isVideo          Boolean  @default(false)
  processingStatus String   @default("completed")
  uploadDate       DateTime @default(now())
  order            Int      @default(0)
  Draft            Draft    @relation(fields: [draftId], references: [id], onDelete: Cascade)
}

model friend_requests {
  id                                      String   @id
  senderId                                String
  receiverId                              String
  status                                  String   @default("pending")
  createdAt                               DateTime @default(now())
  updatedAt                               DateTime
  users_friend_requests_receiverIdTousers users    @relation("friend_requests_receiverIdTousers", fields: [receiverId], references: [id], onDelete: Cascade)
  users_friend_requests_senderIdTousers   users    @relation("friend_requests_senderIdTousers", fields: [senderId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
}

model link_previews {
  id          String   @id
  postId      String
  url         String
  title       String?
  description String?
  imageUrl    String?
  domain      String?
  faviconUrl  String?
  createdAt   DateTime @default(now())
  posts       posts    @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, url])
}

model messages {
  id             String        @id
  conversationId String
  date           DateTime      @default(now())
  message        String
  userName       String
  status         String
  recipient      String
  conversations  conversations @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model post_media {
  id               String   @id
  postId           String
  filename         String
  originalName     String
  fileSize         Int
  mimeType         String
  storagePath      String
  thumbnailPath    String?
  altText          String?
  caption          String?
  isVideo          Boolean  @default(false)
  processingStatus String   @default("completed")
  uploadDate       DateTime @default(now())
  order            Int      @default(0)
  posts            posts    @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model posts {
  id                String          @id
  content           String?
  title             String
  email             String?
  thesis            String?
  yesAction         String?
  voteCount         Int?
  maybeAction       String?
  noAction          String?
  voted             String[]
  likes             String[]
  dislikes          String[]
  date              DateTime
  userId            String
  probablyNoAction  String?
  probablyYesAction String?
  links             String?
  tags              String[]        @default([])
  primaryLinks      String?
  searchVector      String?
  collaborators     String[]        @default([])
  contentHtml       String?
  contentMarkdown   String?
  contentText       String?
  Comment           Comment[]
  bookmarks         bookmarks[]
  link_previews     link_previews[]
  post_media        post_media[]
  users             users           @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes             votes[]
  categories        categories[]    @relation("CategoryToPost")
  subcategories     subcategories[] @relation("PostToSubcategory")
}

model subcategories {
  id         String     @id
  name       String
  categoryId String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime
  categories categories @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  posts      posts[]    @relation("PostToSubcategory")
}

model users {
  id                                                String              @id
  email                                             String              @unique
  username                                          String
  voted                                             Json[]
  bio                                               String?
  followers                                         String[]
  following                                         String[]
  blurhash                                          String?
  hasNewDrafts                                      Boolean             @default(false)
  friends                                           String[]            @default([])
  isAdmin                                           Boolean             @default(false)
  Comment                                           Comment[]
  DeviceToken                                       DeviceToken[]
  Draft                                             Draft[]
  DraftCollaborator                                 DraftCollaborator[]
  bookmarks                                         bookmarks[]
  friend_requests_friend_requests_receiverIdTousers friend_requests[]   @relation("friend_requests_receiverIdTousers")
  friend_requests_friend_requests_senderIdTousers   friend_requests[]   @relation("friend_requests_senderIdTousers")
  posts                                             posts[]
  votes                                             votes[]
}

model votes {
  id     String @id
  vote   String
  userId String
  postId String
  posts  posts  @relation(fields: [postId], references: [id], onDelete: Cascade)
  users  users  @relation(fields: [userId], references: [id])
}
